1. print fibnocchi : 0 1 1 2 3 5 8 13	
code : 
package com.hk;
import java.util.Scanner;

public class loops {
    public static void main(String[] args) {

//        System.out.println("enter num  : ");
        Scanner sc = new Scanner(System.in);
        System.out.println("enter the nth number : ");
        int nth = sc.nextInt();
        int a =0;
        int b= 1;
        int count = 2;
        while(count<=nth){
            int temp = b;
            b = b+a;
            a = temp;
            count++;
        }
        System.out.println(b);

    }
}

2. count number of time a specific number is repeating 
eg: 123223222 (2 is repeating 6 times) 
code:
package com.hk;
import java.util.Scanner;

public class loops {
    public static void main(String[] args) {

//        System.out.println("enter num  : ");
        Scanner sc = new Scanner(System.in);
       int n =1222223;
        int count =0;

        while(n>0){
            int rem  = n% 10;
            if(rem == 2){
                count++;
            }
            n/=10;
        }
        System.out.println(count);

    }
}

3. calcultor using whileloop (infinity calculator)

code: 
package com.hk;
import java.util.Scanner;

public class loops {
    public static void main(String[] args) {

        Scanner sc = new Scanner(System.in);


    int ans = 0;
    while(true){
        System.out.println("enter the opertor :  ");
        char op = sc.next().trim().charAt(0);
        if(op == '+' || op == '-'|| op == '*'|| op == '/'|| op == '%'){
            System.out.println("enter 2 numbers: ");
            int num1 = sc.nextInt();
            int num2 = sc.nextInt();

            if(op=='+'){
                ans = num1+num2;
            }
            if(op=='-'){
                ans = num1-num2;
            }
            if(op=='*'){
                ans = num1*num2;
            }
            if(op=='/'){
                if(num2 !=0) {
                    ans = num1 / num2;
                }
            }
            if(op=='%'){
                ans = num1%num2;
            }
        }
        else if(op =='x' || op=='X'){
            System.out.println("thanx for using haky's calcii");
            break;

        }

        System.out.println("answer is "+ ans);

    }

    }
}


4. to check weather a number is prime is not

code:
package com.hk;

import java.util.Scanner;

public class prime {

    static void prime(int num){
        int decide = 0;

        for(int i =2; i<= num/2; ++i) {
            if (num % i == 0) {
                decide = 1;
                System.out.println("not a prime");
                break;
            }

        }

        if(num ==0 || num ==1){

            decide = 1;

            System.out.println("not a prime");
        }



        if(decide ==0){
            System.out.println("a prime no.");
        }
    }

    public static void main(String[] args) {


        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the Number You Want To check");
        int num  =  sc.nextInt();
         prime(num);



    }
}

5. to print series of prime number from 1 to n :
code:

package com.haky;

public class Main {

    static void prime(int n) {
        int i, j, dec;
        for(i=1;i<=n; i++) {
            if (i == 1 || i == 0)
                continue;
            dec=1;

                for (j = 2; j <= i / 2; ++j) {
                    if(i%j == 0){
                        dec =0;
                        break;
                    }

                }
                if(dec==1)
                    System.out.print(i + " ");


        }
    }


    public static void main(String[] args) {

     int n =11;
     prime(n);

    }
}

6. for loop to take inputs for array of dezired length
code : 
package com.haky;

import java.util.Arrays;
import java.util.Scanner;

public class arrays {

    public static void main(String[] args) {


          Scanner sc = new Scanner(System.in);
        System.out.println("Enter Arrays size");
          int n =sc.nextInt();
        System.out.println("enter array elements");
      int [] arr = new int[n];
      for(int i =0; i<arr.length; i++){
          arr[i] = sc.nextInt();

      }
        System.out.println(Arrays.toString(arr));

    }
}

7. enter and print 2D array
code
package com.haky;

import java.util.Arrays;
import java.util.Scanner;

public class arrays {



    public static void main(String[] args) {


        Scanner sc =new Scanner(System.in);
        int [][] arr =  new int[2][2];

        for(int i=0; i<arr.length;i++){
            for(int j = 0; j<arr[i].length;j++){

                arr[i][j] = sc.nextInt();
            }
        }
        for(int i=0; i<arr.length;i++) {
            System.out.println(Arrays.toString(arr[i]));
        }


    }

}

8. to enter aand print multidimensional array list
code:
package com.haky;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class arrays {



    public static void main(String[] args) {
        Scanner sc = new Scanner (System.in);

        ArrayList<ArrayList<Integer>> list = new ArrayList<>();

        for (int i = 0; i < 3; i++) {
            list.add( new ArrayList<Integer>());

        }

        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                list.get(i).add(sc.nextInt());

            }

        }
            System.out.print(list);



    }

}

9. swap 2 elements of array
code:
package com.haky;

import java.util.Arrays;
import java.util.Scanner;

public class array2d {

    static void swap(int [] arr, int index1, int index2) {

        int temp = arr[index1];
        arr[index1] = arr[index2];
        arr[index2] = temp;


    }

    public static void main(String[] args) {

        int [] arr = {10, 20, 30, 40, 50};
        int a;int b;
        swap(arr, 1,4);
        System.out.println(Arrays.toString(arr));

    }
}

10. reverse an array:
code:
package com.haky;

import java.util.Arrays;

public class arr2d {
    static void arrayswap(int index1 , int index2, int[]arr){

        int temp = arr[index1];
        arr[index1] =arr[index2];
        arr[index2] = temp;

//        System.out.println(Arrays.toString(arr));
    }

    static void reverse(int[] arr){
        int start =0;
        int end  =arr.length-1;
        while(start<end) {
            arrayswap(start,end, arr);
            start++;
            end--;
        }




    }

    public static void main(String[] args) {

        int arr[] = {10,20,30,40,50,60,99,543,987};
        int a,b;
//        arrayswap(0,5,arr);
        reverse(arr);
        System.out.println(Arrays.toString(arr));

    }
}

11. max element of an array
code:

12. search a character in a a string
code:
package com.haky;

import java.util.Arrays;

public class logic {
    static boolean tring(String name, char chars ){
        for (int i = 0; i < name.length(); i++) {
            if(chars == name.charAt(i)){
                System.out.println(i);
                return true;
            }
        }
        return false;

    }
    public static void main(String[] args) {

        String name = "hussain kagiwala";
        char ch = 'w';
        System.out.println(tring(name, ch));
        System.out.println(Arrays.toString(name.toCharArray()));
    }
}

13. search an element in a 2d array
code:
package com.haky;

import java.util.Arrays;

public class logic {

    static  int[] search(int[][]arr,int target){
        int count=0;

        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                if(arr[i][j] == target){
                    count+=1;
                    return new int[]{i,j};
                }
            }
        }
        return new int[]{-1,-1};
    }
    public static void main(String[] args) {


        int [][] arr = {
                {10,56,30,40,56,60},
                {12,31,4,18,56,7,8,9},
                {5,6,4,3,79,75,56}



        };
        int target = 3;
        int[] ans  = search(arr, target);
        System.out.println(Arrays.toString(ans));



    }

    }

14. count digits of array elements and find elements with even numer of digits
code: package com.haky;

class prac{
    static int countdigi(int[] arr){
       int count = 0;
        for (int i = 0; i <arr.length ; i++) {
        int nums = arr[i];
        if(even(nums)){
            count++;
        }


        }
        return count;

    }
    static boolean even(int nums){
        int num = count(nums);
        if(num % 2 == 0){
            return true;
        }
        return false;
    }
    static int count(int nums){
        int sum =0;
        while(nums>0){
            sum++;
            nums/=10;
        }
        return sum;
    }
    public static void main(String[] args) {

        int arr[] = {10,200,3043, 345675,23,432,2,34};
        int ans  = countdigi(arr);
        System.out.println(ans);

    }

}

15.binary search algo to find an element in an array.
code: 
package com.haky;

class prac{
    static int find(int [] arr , int target){
        int start =0;
        int end = arr.length-1;
        while(start <=end ){
        int mid = start + (end-start)/2;
            if(target > arr[mid]){
                start = mid+1;
            }
            else if(target<arr[mid]){
                end = mid-1;
            }
            else{
                return mid;
            }
        }
//            System.out.println(arr[mid]);

        return -1;


    }

    public static void main(String[] args) {
        int[]arr ={10,20,30,40,50,60,70,80};

     int ans =  find(arr,70);
        System.out.println(ans);

    }

}
16. to find the pivot element in an array eg. {10,11,13,14,15,5,6,7} Output : 15 i.e. : 4 index 
code:

package com.haky;

public class tp {
static int pivot(int[]arr){
    int start =0;
    int end = arr.length-1;
    while(start <= end){
        int mid = start +(end- start)/2;
        if(mid < end && arr[mid] > arr[mid+1]){
            return mid;
        }
        if(mid>start && arr[mid] < arr[mid-1]){
            return mid-1;
        }
        if(arr[mid] < arr[start]){
            end = mid-1;

        }
        else{
            start =  mid+1;
        }
    }
    return -1;
}

    public static void main(String[] args) {
        int[]arr = {10,11,12,13,14,5,6,7};
        System.out.println(pivot(arr));
    }


    }


17. count no. of rotations of an array eg. {10,11,1,2,3,4,5} ans : 2
code:
package com.haky;

import java.util.Arrays;

public class logic {

    static int pivot(int[]arr){
        int start =0;
        int end = arr.length-1;
        int pivot ;
        while(start <= end){
            int mid = start +(end- start)/2;
            if(mid < end && arr[mid] > arr[mid+1]){
                pivot = mid+1;
                return pivot;
            }
            if(mid>start && arr[mid] < arr[mid-1]){
                pivot = mid;
                return pivot;
            }
            if(arr[mid] < arr[start]){
                end = mid-1;

            }
            else{
                start =  mid+1;
            }
        }
        return 0;
    }
    public static void main(String[] args) {

        int[] arra = {0,1,2,4,5,6,7};
        System.out.println(pivot(arra));






    }

    }

18. bubble sort array
code:
package com.haky;

import java.util.Arrays;

public class bubble {

    public static void main(String[] args) {

        int[]arr = {-32,-45,-44,0};
       bubble(arr);
        System.out.println(Arrays.toString(arr));
    }
    static void bubble(int[] arr){
        boolean swap;

        for (int i = 0; i < arr.length ; i++) {
            swap = false;
            for (int j = 1; j < arr.length-i ; j++) {

                if(arr[j] < arr[j-1]){
                    int temp = arr[j];
                    arr[j] = arr[j-1];
                    arr[j-1] = temp;
                    swap = true;
                }


            }
            if(!swap){
                break;
            }


        }
    }
}



18. selection sort code:
code:
package com.haky;

import java.util.Arrays;

public class selection {

    static void selection(int[]arr){
        for (int i = 0; i < arr.length; i++) {
            int last  = arr.length-i-1;
            int maxItem = maxindex(arr, 0 ,last);
            swap(arr, maxItem,last);


        }
    }
    static void swap(int[] arr,int first , int second){
        int temp = arr[first];
        arr[first]= arr[second];
        arr[second] = temp;
    }

     static int maxindex(int[] arr, int start, int last) {
        int max = start;
         for (int i = start; i <=last ; i++) {
             if(arr[max]<arr[i]){
                 max = i;
             }

         }
         return max;
    }

    public static void main(String[] args) {
        int[]arr = {8,6,4,5,2};
        selection(arr);
        System.out.println(Arrays.toString(arr));
    }
}

19. insertion sort
code:
package com.haky;

import java.util.Arrays;

public class insertion {
    static void insertion(int []arr){

        for (int i = 0; i <= arr.length-2; i++) {
            for (int j = i+1; j >0  ; j--) {

                if(arr[j] < arr[j-1]){
                        swap(arr,j,j-1);
                    }
                    else{
                        break;
                    }


            }

        }

    }
    static void swap(int[] arr,int first , int second){
        int temp = arr[first];
        arr[first]= arr[second];
        arr[second] = temp;
    }

    public static void main(String[] args) {
        int[]arr = {1,2,3,4,5};
        insertion(arr);
        System.out.println(Arrays.toString(arr));
    }
}


20. cyclic sort
code:
package com.haky;

import java.util.Arrays;

public class cyclic {
    static void cyclic(int[]arr){
       int i =0;
       while(i<arr.length)
        {
            int correct  = arr[i] -1;
            if(arr[i] != arr[correct]){
                swap(arr, i,correct);
            }
            else{
                i++;
            }

        }
    }
    static void swap(int[] arr,int first , int second){
        int temp = arr[first];
        arr[first]= arr[second];
        arr[second] = temp;
    }

    public static void main(String[] args) {
        int[]arr = {5,4,3,2,1};
        cyclic(arr);
        System.out.println(Arrays.toString(arr));
    }
}


21. disappeared number in array(Asked In google)

code:
package com.haky;

import java.util.ArrayList;
import java.util.List;

public class google {
    static List<Integer> cyclic(int[] arr) {
        int i = 0;
        while (i < arr.length) {
            int correct = arr[i] - 1;
            if ( arr[i] != arr[correct]) {
                swap(arr, i, correct);
            } else {
                i++;
            }

        }
        List<Integer> ans =new ArrayList<>();
        for (int j = 0; j < arr.length; j++) {
            if(arr[j] != j+1){
                ans.add(j+1);
            }

        }

        return ans;

    }

    static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }

    public static void main(String[] args) {

        int[]arr= {1,2,4,6,8,7};
        List ans = cyclic(arr);
        System.out.println(ans);
    }
}

22. Missing number in an array(asked in amazon)
code:
package com.haky;

import java.util.Arrays;

public class cyclic {
    static int cyclic(int[]arr){
       int i =0;
       while(i<arr.length)
        {
            int correct  = arr[i] -1 ;
            if(arr[i]< arr.length && arr[i] != arr[correct]){
                swap(arr, i,correct);
            }
            else{
                i++;
            }

        }
        for (int j = 1; j < arr.length ; j++) {

            if(arr[j]!= j){
                return j;
            }
        }
        return arr.length;
    }
    static void swap(int[] arr,int first , int second){
        int temp = arr[first];
        arr[first]= arr[second];
        arr[second] = temp;
    }

    public static void main(String[] args) {
        int[]arr = {1,4};
        int ans = cyclic(arr);
        System.out.println(ans);
//        System.out.println(arr.length);
    }
}

23. create custom linked list
code : 
package creator;

public class LL {
    private Node head;
    private Node tail;
    private int size;
    public LL() {
        this.size = 0;
    }


    private class Node{
        private int value;
        private Node next;

        public Node(int value) {
            this.value = value;
        }

        public Node(int value, Node next) {
            this.value = value;
            this.next = next;
        }
    }
    public void insertfirst(int value){
        Node node= new Node(value);
        node.next = head;
        head = node;
        if(tail == null){
            tail = head;
        }

        size++;

    }
    public void insertlast(int value){
        if(tail == null){
            insertfirst(value);
            return;
        }
        Node node  = new Node(value);
        tail.next = node;
        tail = node;
        size++;
    }
    public void insert(int value, int index){
        if(index == 0){
            insertfirst(value);
            return;
        }
        if(index == size){
            insertlast(value);
            return;

        }
        Node temp = head;
        for (int i = 1; i <index ; i++) {
            temp = temp.next;

        }
        Node node = new Node(value , temp.next);
        temp.next = node;

        size++;
    }
    public void deletefirst(){
        int value = head.value;
        head = head.next;
        if(head == null){
            tail = null;
        }
        size--;
    }
    public Node find(int value){
        Node node  =head;
       while(node!= null){
           if(node.value == value){
               return node;
           }
           node  =node.next;
       }
        return null;
    }
    public void display(){
        Node temp =head;
        while(temp != null){
            System.out.print(temp.value + "->");
            temp = temp.next;
        }
        System.out.println("End");
    }



    public static void main(String[] args) {
       LL list = new LL();
        list.insertfirst(5);
        list.insertlast(10);
        list.insertlast(11);
        list.insertlast(13);
        list.insertlast(14);
        list.insert(12,3);
        list.deletefirst();
        list.insertfirst(1000);
        list.display();
        System.out.println(list.find(13)); 


    }

}

24. circular linked list
code
package creator;

public class doublyLL {

   private Node head;
   private Node tail;

    public void inserfirst(int value){
        Node  node  = new Node(value);
        node.next = head;
        node.prev = null;
        if(head != null)
        {
        head.prev = node;
        }
        head = node;
    }



    public void insertlast(int value) {
        Node node = new Node(value);
        Node last = head;
        node.next = null;
        if(head == null){
            node.prev = null;
            head = node;
            return;
        }
        while(last.next != null){
            last = last.next;
        }
        last.next = node;
        node.prev = last;

    }

    public Node find(int value){
        Node node  =head;
        while(node!= null){
            if(node.value == value){
                return node;
            }
            node  =node.next;
        }
        return null;
    }
    public void insertindex(int after , int value){
        Node p = find(after);
        if(p == null){
            System.out.println("not in the linked list");
        }
        Node node  = new Node(value);
        node.next = p.next;
        p.next = node;
        node.prev = p;
        if(node.next != null) {
            node.next.prev = node;
        }


    }







    public void display(){
        Node node = head;
        while(node != null){
            System.out.print(node.value + " -> ");
            node  = node.next;
        }
        System.out.println("End");
    }

    public void displayrev(){

        Node node = head;
        Node last = null;
        while(node != null){
            last = node;
            node  = node.next;
        }
        while(last != null){
            System.out.print(last.value + " -> ");
            last  = last.prev;

        }
        System.out.println("Start");
    }




    private class Node{
        int value;
        Node next;
        Node prev;

        public Node(int value) {
            this.value = value;
        }

        public Node(int value, Node next, Node prev) {
            this.value = value;
            this.next = next;
            this.prev = prev;
        }
    }

    public static void main(String[] args) {

        doublyLL list = new doublyLL();
        list.inserfirst(100);
        list.inserfirst(120);
        list.inserfirst(140);
        list.displayrev();
        list.insertlast(500);
        list.display();
        list.insertindex(500,89);
        list.display();
//        circularLL list2 = new circularLL();



    }

}

25 . custom stack in java
code:
package stacks_queues;

public class customstack {
    protected int[] data;
    private static final int DEFAULT_SIZE =10;
        int ptr = -1;

    public customstack() {
        this(DEFAULT_SIZE);
    }

    public customstack(int size) {
        this.data = new int[size];
    }

    public boolean push(int val) {
            if(isFull()){
                System.out.println("stack is full");
                return false;
            }
            ptr++;
            data[ptr] = val;
            return true;
    }

    public int pop() throws stackexception {
        if(isEmpty()){
            throw new stackexception("stack is already empty");
        }

        return data[ptr--];
    }
    public int peek() throws stackexception {
        if(isEmpty()){
            throw new stackexception("stack is already empty");
        }
        return data[ptr];
    }

    public boolean isFull() {
        return ptr  == data.length-1;
    }
    public boolean isEmpty(){
        return ptr == -1;
    }


}

26. merege sort with recursion 
code : 
package package1;



public class merge {

    static void conquer(int[]arr , int start ,  int end ,  int mid){
        int [] merge = new int [end - start +1];
        int index1 = start;
        int index2 = mid+1;
        int x= 0;
        while(index1<= mid && index2 <= end){
            if(arr[index1] <= arr[index2] ){
                merge[x++] = arr[index1++];
            }
            else{
                merge[x++] = arr[index2++];
            }
        }
        while(index1 <= mid ){
            merge[x++] = arr[index1++];

        }
        while(index2 <= end){
            merge[x++] = arr[index2++];

        }
        for(int i =0 , j=start; i<merge.length;i++,j++){
            arr[j]  = merge[i];
        }

    }


    static void divide(int arr[] ,int start , int end){
        if(start >= end){
            return;
        }
        int  mid  = start  + (end - start)/2;
        divide(arr , start , mid);
        divide(arr, mid+1 , end);
        conquer(arr, start , end, mid);

    }

    public static void main(String[] args) {
        int [] arr = {2,7,5,9,3,5,8,4};
        int n = arr.length;
        divide(arr,0,n-1);
//        System.out.println(Arrays.toString(arr));
        for (int i = 0; i <n ; i++) {
            System.out.print(arr[i] + " ");

        }
    }
}








 
